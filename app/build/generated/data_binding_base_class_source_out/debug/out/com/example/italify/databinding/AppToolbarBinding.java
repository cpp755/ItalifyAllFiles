// Generated by view binder compiler. Do not edit!
package com.example.italify.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.italify.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AppToolbarBinding implements ViewBinding {
  @NonNull
  private final Toolbar rootView;

  @NonNull
  public final ImageView backIcon;

  @NonNull
  public final ImageView homeIcon;

  @NonNull
  public final TextView starCount;

  @NonNull
  public final ImageView starIcon;

  @NonNull
  public final TextView title;

  @NonNull
  public final Toolbar toolbar;

  private AppToolbarBinding(@NonNull Toolbar rootView, @NonNull ImageView backIcon,
      @NonNull ImageView homeIcon, @NonNull TextView starCount, @NonNull ImageView starIcon,
      @NonNull TextView title, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.backIcon = backIcon;
    this.homeIcon = homeIcon;
    this.starCount = starCount;
    this.starIcon = starIcon;
    this.title = title;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public Toolbar getRoot() {
    return rootView;
  }

  @NonNull
  public static AppToolbarBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AppToolbarBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.app_toolbar, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AppToolbarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backIcon;
      ImageView backIcon = ViewBindings.findChildViewById(rootView, id);
      if (backIcon == null) {
        break missingId;
      }

      id = R.id.homeIcon;
      ImageView homeIcon = ViewBindings.findChildViewById(rootView, id);
      if (homeIcon == null) {
        break missingId;
      }

      id = R.id.starCount;
      TextView starCount = ViewBindings.findChildViewById(rootView, id);
      if (starCount == null) {
        break missingId;
      }

      id = R.id.starIcon;
      ImageView starIcon = ViewBindings.findChildViewById(rootView, id);
      if (starIcon == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      Toolbar toolbar = (Toolbar) rootView;

      return new AppToolbarBinding((Toolbar) rootView, backIcon, homeIcon, starCount, starIcon,
          title, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
